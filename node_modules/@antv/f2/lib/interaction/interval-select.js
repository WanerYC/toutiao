function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Util = require('../util/common');
var Helper = require('../util/helper');
var Interaction = require('./base');
var Chart = require('../chart/chart');

var IntervalSelect = function (_Interaction) {
  _inherits(IntervalSelect, _Interaction);

  function IntervalSelect() {
    _classCallCheck(this, IntervalSelect);

    return _possibleConstructorReturn(this, _Interaction.apply(this, arguments));
  }

  IntervalSelect.prototype.getDefaultCfg = function getDefaultCfg() {
    var defaultCfg = _Interaction.prototype.getDefaultCfg.call(this);
    defaultCfg = Util.mix({}, defaultCfg, {
      startEvent: 'tap',
      processEvent: null,
      selectAxis: true, // 是否高亮坐标轴文本
      selectAxisStyle: {
        fontWeight: 'bold'
      },
      mode: 'shape', // 选中模式，按照 shape 集中还是一定的范围内选取
      selectStyle: {
        fillOpacity: 1
      }, // 被选中图形的样式
      unSelectStyle: {
        fillOpacity: 0.4
      }, // 未被选中图形的样式
      cancelable: true // 选中之后是否允许取消选中，默认允许取消选中
    });
    if (Util.isWx || Util.isMy) {
      // 小程序
      defaultCfg.startEvent = 'touchstart';
      defaultCfg.endEvent = 'touchend';
    }

    return defaultCfg;
  };

  IntervalSelect.prototype._resetShape = function _resetShape(shape) {
    var originAttrs = shape.get('_originAttrs');
    if (originAttrs) {
      shape._attrs.attrs = originAttrs;
      shape.set('_originAttrs', null);
    }
  };

  IntervalSelect.prototype._setEventData = function _setEventData(ev) {
    var selectedShape = this.selectedShape;
    if (selectedShape && !selectedShape.get('destroyed')) {
      ev.data = selectedShape.get('origin')._origin; // 绘制数据，包含原始数据啊
      ev.shapeInfo = selectedShape.get('origin');
      ev.shape = selectedShape;
      ev.selected = !!selectedShape.get('_selected'); // 返回选中的状态
    }
  };

  IntervalSelect.prototype.reset = function reset() {
    var self = this;
    if (!self.selectedShape) {
      return;
    }
    var chart = self.chart;
    var geom = chart.get('geoms')[0];
    var container = geom.get('container');
    var children = container.get('children');

    Util.each(children, function (child) {
      self._resetShape(child);
      child.set('_selected', false);
    });

    if (self.selectedAxisShape) {
      self._resetShape(self.selectedAxisShape);
    }
    self.canvas.draw();
    self.selectedShape = null;
    self.selectedAxisShape = null;
  };

  IntervalSelect.prototype.start = function start(ev) {
    var chart = this.chart;
    if (ev.type === 'tap') {
      ev.clientX = ev.center.x;
      ev.clientY = ev.center.y;
    }

    var _Util$createEvent = Util.createEvent(ev, chart),
        x = _Util$createEvent.x,
        y = _Util$createEvent.y;

    // 查找被点击的 shape


    var mode = this.mode;
    var geom = chart.get('geoms')[0];
    var container = geom.get('container');
    var children = container.get('children');
    var selectedShape = void 0;
    var unSelectedShapes = [];
    if (mode === 'shape') {
      var plot = chart.get('plotRange');
      if (!Helper.isPointInPlot({ x: x, y: y }, plot)) {
        // 不在绘图区域
        this.reset();
        return;
      }
      Util.each(children, function (child) {
        var box = child.getBBox();
        if (x >= box.x && x <= box.x + box.width && y >= box.y && y <= box.height + box.y) {
          // inbox
          selectedShape = child;
        } else {
          unSelectedShapes.push(child);
        }
      });
    } else if (mode === 'range') {
      var records = chart.getSnapRecords({ x: x, y: y });
      if (!records.length) {
        this.reset();
        return;
      }

      var data = records[0]._origin;
      Util.each(children, function (child) {
        if (child.get('isShape') && child.get('className') === geom.get('type')) {
          // get geometry's shape
          var shapeData = child.get('origin')._origin;
          if (Object.is(shapeData, data)) {
            // 判断是否相同
            selectedShape = child;
          } else {
            unSelectedShapes.push(child);
          }
        }
      });
    }

    if (selectedShape) {
      // 有图形被选中
      this.selectedShape = selectedShape;
      if (selectedShape.get('_selected')) {
        // 已经被选中
        if (!this.cancelable) {
          // 不允许取消选中则不处理
          this._setEventData(ev);
          return;
        }
        this.reset(); // 允许取消选中
      } else {
        // 未被选中
        var selectStyle = this.selectStyle,
            unSelectStyle = this.unSelectStyle,
            selectAxisStyle = this.selectAxisStyle;


        if (!selectedShape.get('_originAttrs')) {
          var originAttrs = Object.assign({}, selectedShape.attr());
          selectedShape.set('_originAttrs', originAttrs);
        }

        selectedShape.attr(selectStyle);

        Util.each(unSelectedShapes, function (child) {
          if (!child.get('_originAttrs')) {
            var _originAttrs = Object.assign({}, child.attr());
            child.set('_originAttrs', _originAttrs);
          } else {
            child.attr(child.get('_originAttrs'));
          }
          child.set('_selected', false);
          unSelectStyle && child.attr(unSelectStyle);
        });

        selectedShape.set('_selected', true);

        if (this.selectAxis) {
          // 坐标轴高亮
          if (this.selectedAxisShape) {
            this._resetShape(this.selectedAxisShape);
          }
          // 查找 坐标轴 shape
          var xScale = geom.getXScale();
          var origin = selectedShape.get('origin')._origin;

          var _chart$get = chart.get('axisController'),
              frontPlot = _chart$get.frontPlot,
              backPlot = _chart$get.backPlot;

          var axisShape = void 0;

          Util.each(frontPlot.get('children').concat(backPlot.get('children')), function (s) {
            if (s.get('value') === xScale.scale(origin[xScale.field])) {
              axisShape = s;
              return false;
            }
          });
          this.selectedAxisShape = axisShape;
          axisShape.set('_originAttrs', Object.assign({}, axisShape.attr()));
          axisShape.attr(selectAxisStyle);
        }

        this.canvas.draw();
      }
    } else {
      // 没有选中图形，恢复原态
      this.reset();
    }

    this._setEventData(ev);
  };

  IntervalSelect.prototype.end = function end(ev) {
    this._setEventData(ev);
  };

  return IntervalSelect;
}(Interaction);

Chart.registerInteraction('interval-select', IntervalSelect);
module.exports = IntervalSelect;